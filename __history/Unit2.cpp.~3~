//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit2.h"

#include <string>
#include <string.h>
#include "sqlite3.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "VirtualTrees"
#pragma resource "*.dfm"
TForm2 *Form2;
//---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner)
	: TForm(Owner)
{
	VirtualStringTree1->NodeDataSize = sizeof(TreeNodeStruct);
}
//---------------------------------------------------------------------------
void __fastcall TForm2::Button1Click(TObject *Sender)
{

	VirtualStringTree1->Clear();
	sqlite3* DataBase;

	//Открытие БД
	int openResult = sqlite3_open16(L"..\\..\\DB\\Test2.db", &DataBase);
	const char *errmsg;
	sqlite3_stmt *pStatement;

	//Подготовка запроса
	int result = sqlite3_prepare16_v2(DataBase, L"Select * FROM conversetions ORDER BY id ASC", -1, &pStatement, NULL);

	if( result != SQLITE_OK)
	{
		errmsg = sqlite3_errmsg(DataBase);
	}
	else
	{
		errmsg = "DONE";
	};

	//Выполнение запроса
	for (int  i = 0;;i++)
	{
		result = sqlite3_step(pStatement);
		if(result == SQLITE_DONE)
			break;

		PVirtualNode entryNode = VirtualStringTree1->AddChild(VirtualStringTree1->RootNode);
		TreeNodeStruct *nodeData = (TreeNodeStruct*)VirtualStringTree1->GetNodeData(entryNode);

		int Id = sqlite3_column_int(pStatement,1);
		nodeData->Id = Id;

		wchar_t *wstr = (wchar_t*)sqlite3_column_text16(pStatement,4);
		nodeData->Type = Type;

		wstr = (wchar_t*)sqlite3_column_text16(pStatement,5);
		nodeData->Message = Message;

		wstr = (wchar_t*)sqlite3_column_text16(pStatement,6);
		nodeData->Name = Name;

		wstr = (wchar_t*)sqlite3_column_text16(pStatement,7);
		nodeData->ProfileName = ProfileName;

		wstr = (wchar_t*)sqlite3_column_text16(pStatement,10);
		nodeData->Phone = Phone;





		/*
        		int ChatId = sqlite3_column_int(pStatement,2);
		int SenderAlias = sqlite3_column_int(pStatement,3);

		wstr = (wchar_t*)sqlite3_column_text16(pStatement,4);
		PVirtualNode entryNode = VirtualStringTree1->AddChild(VirtualStringTree1->RootNode);
		TreeNodeStruct *nodeData = (TreeNodeStruct*)VirtualStringTree1->GetNodeData(entryNode);

		nodeData->TimeStamp = TimeStamp;
		nodeData->ChatId = ChatId;
		nodeData->SenderAlias = SenderAlias;
		nodeData->Message = wstr; */


	};

	sqlite3_finalize(pStatement);

	sqlite3_close(DataBase);

	/*
	int Id;
	UnicodeString Type;
	UnicodeString Message;
	UnicodeString Phone;
	UnicodeString ProfileName;
	int ProfileID;
	*/
}
//---------------------------------------------------------------------------
